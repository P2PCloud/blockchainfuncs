// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BrokerBooking is an auto generated low-level Go binding around an user-defined struct.
type BrokerBooking struct {
	Index          *big.Int
	VmTypeId       *big.Int
	Miner          common.Address
	User           common.Address
	PricePerSecond *big.Int
	BookedAt       *big.Int
	LastPayment    *big.Int
}

// BrokerVMOffer is an auto generated low-level Go binding around an user-defined struct.
type BrokerVMOffer struct {
	Index             *big.Int
	Miner             common.Address
	PricePerSecond    *big.Int
	MachinesAvailable *big.Int
	VmTypeId          *big.Int
}

// BrokerMetaData contains all meta data concerning the Broker contract.
var BrokerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minerPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"name\":\"BookingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"name\":\"BookingExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minerPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"name\":\"BookingReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"name\":\"BookingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minerPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"name\":\"BookingStopped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"BookVM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"DepositCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"FindBookingsByMiner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bookedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.Booking[]\",\"name\":\"filteredBookings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"FindBookingsByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bookedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.Booking[]\",\"name\":\"filteredBookings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetAvailableOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machinesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.VMOffer[]\",\"name\":\"filteredOffers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vmTypeId\",\"type\":\"uint256\"}],\"name\":\"GetAvailableOffersByType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machinesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.VMOffer[]\",\"name\":\"filteredOffers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"GetBooking\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bookedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.Booking\",\"name\":\"booking\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"GetMinersOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machinesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.VMOffer[]\",\"name\":\"filteredOffers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetStablecoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetUsersBookings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bookedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"}],\"internalType\":\"structBroker.Booking[]\",\"name\":\"filteredBookings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"RemoveOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCommunityAddress\",\"type\":\"address\"}],\"name\":\"SetCommunityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"newStablecoinAddress\",\"type\":\"address\"}],\"name\":\"SetStablecoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machinesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pps\",\"type\":\"uint256\"}],\"name\":\"UpdateOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vmTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machinesAvailable\",\"type\":\"uint256\"}],\"name\":\"addOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMinerUrl\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablecoinAddress\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCommunityFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"url\",\"type\":\"bytes32\"}],\"name\":\"setMunerUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526000600155600060035534801561001a57600080fd5b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506131e58061006b6000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80637f7a1915116100de578063b65c4b9c11610097578063c9b16fee11610071578063c9b16fee146104ae578063d3554ab5146104ca578063e088b29e146104fa578063f44f11cd1461051857610172565b8063b65c4b9c14610430578063c1f6b1fa1461044e578063c2161a051461047e57610172565b80637f7a19151461034857806390ad688b146103785780639f4b80ab14610396578063a3c28021146103b4578063a5701e63146103e4578063ab49ec451461040057610172565b8063534b3ccb11610130578063534b3ccb1461027157806354fd4d50146102a1578063569e2e0f146102bf5780636b620ed5146102dd5780637559fe62146102f95780637bef4f541461032a57610172565b8062cf9021146101775780630d12bbdb1461019357806318c5e502146101c357806321e20d00146101e1578063366445bf146102115780633b3e328b14610241575b600080fd5b610191600480360381019061018c91906123a0565b610534565b005b6101ad60048036038101906101a891906123a0565b610636565b6040516101ba91906123e8565b60405180910390f35b6101cb61071c565b6040516101d89190612412565b60405180910390f35b6101fb60048036038101906101f691906123a0565b610724565b6040516102089190612594565b60405180910390f35b61022b600480360381019061022691906125e2565b610962565b604051610238919061274c565b60405180910390f35b61025b6004803603810190610256919061276e565b610c2c565b6040516102689190612412565b60405180910390f35b61028b600480360381019061028691906125e2565b610d22565b604051610298919061274c565b60405180910390f35b6102a9610fec565b6040516102b69190612412565b60405180910390f35b6102c7610ff1565b6040516102d491906127d0565b60405180910390f35b6102f760048036038101906102f291906125e2565b61101b565b005b610313600480360381019061030e91906125e2565b6110ef565b6040516103219291906127eb565b60405180910390f35b610332611155565b60405161033f9190612873565b60405180910390f35b610362600480360381019061035d91906125e2565b61117f565b60405161036f919061274c565b60405180910390f35b610380611449565b60405161038d9190612412565b60405180910390f35b61039e611453565b6040516103ab91906123e8565b60405180910390f35b6103ce60048036038101906103c991906123a0565b6115b8565b6040516103db91906123e8565b60405180910390f35b6103fe60048036038101906103f9919061276e565b611701565b005b61041a600480360381019061041591906125e2565b6117dd565b60405161042791906128a7565b60405180910390f35b610438611826565b6040516104459190612594565b60405180910390f35b610468600480360381019061046391906123a0565b611a42565b6040516104759190612412565b60405180910390f35b61049860048036038101906104939190612902565b611dc1565b6040516104a591906129bd565b60405180910390f35b6104c860048036038101906104c39190612a16565b611ed6565b005b6104e460048036038101906104df91906125e2565b611faa565b6040516104f19190612594565b60405180910390f35b610502612212565b60405161050f9190612412565b60405180910390f35b610532600480360381019061052d9190612a6f565b612219565b005b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90612b1f565b60405180910390fd5b6000808281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055505050565b6000612710821061067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390612bb1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070390612c43565b60405180910390fd5b8160098190555060009050919050565b600042905090565b6060600060015467ffffffffffffffff81111561074457610743612c63565b5b60405190808252806020026020018201604052801561077d57816020015b61076a6122b7565b8152602001906001900390816107625790505b509050600080600090505b6001548110156108ac5784600080838152602001908152602001600020600401541480156107cb5750600080600083815260200190815260200160002060030154115b15610899576000808281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505083838151811061087e5761087d612c92565b5b60200260200101819052506001826108969190612cf0565b91505b80806108a490612d46565b915050610788565b508067ffffffffffffffff8111156108c7576108c6612c63565b5b60405190808252806020026020018201604052801561090057816020015b6108ed6122b7565b8152602001906001900390816108e55790505b50925060005b8181101561095a5782818151811061092157610920612c92565b5b602002602001015184828151811061093c5761093b612c92565b5b6020026020010181905250808061095290612d46565b915050610906565b505050919050565b6060600060035467ffffffffffffffff81111561098257610981612c63565b5b6040519080825280602002602001820160405280156109bb57816020015b6109a86122fc565b8152602001906001900390816109a05790505b509050600080600090505b600354811015610b76578473ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b6357600260008281526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481525050838381518110610b4857610b47612c92565b5b6020026020010181905250600182610b609190612cf0565b91505b8080610b6e90612d46565b9150506109c6565b508067ffffffffffffffff811115610b9157610b90612c63565b5b604051908082528060200260200182016040528015610bca57816020015b610bb76122fc565b815260200190600190039081610baf5790505b50925060005b81811015610c2457828181518110610beb57610bea612c92565b5b6020026020010151848281518110610c0657610c05612c92565b5b60200260200101819052508080610c1c90612d46565b915050610bd0565b505050919050565b60006040518060a0016040528060015481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018381526020018481525060008060015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015590505060016000815480929190610d0690612d46565b919050555060018054610d199190612d8e565b90509392505050565b6060600060035467ffffffffffffffff811115610d4257610d41612c63565b5b604051908082528060200260200182016040528015610d7b57816020015b610d686122fc565b815260200190600190039081610d605790505b509050600080600090505b600354811015610f36578473ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f2357600260008281526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481525050838381518110610f0857610f07612c92565b5b6020026020010181905250600182610f209190612cf0565b91505b8080610f2e90612d46565b915050610d86565b508067ffffffffffffffff811115610f5157610f50612c63565b5b604051908082528060200260200182016040528015610f8a57816020015b610f776122fc565b815260200190600190039081610f6f5790505b50925060005b81811015610fe457828181518110610fab57610faa612c92565b5b6020026020010151848281518110610fc657610fc5612c92565b5b60200260200101819052508080610fdc90612d46565b915050610f90565b505050919050565b600181565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a290612e34565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060006110fd84612260565b905080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114a9190612d8e565b819250925050915091565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060035467ffffffffffffffff81111561119f5761119e612c63565b5b6040519080825280602002602001820160405280156111d857816020015b6111c56122fc565b8152602001906001900390816111bd5790505b509050600080600090505b600354811015611393578473ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361138057600260008281526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820154815260200160068201548152505083838151811061136557611364612c92565b5b602002602001018190525060018261137d9190612cf0565b91505b808061138b90612d46565b9150506111e3565b508067ffffffffffffffff8111156113ae576113ad612c63565b5b6040519080825280602002602001820160405280156113e757816020015b6113d46122fc565b8152602001906001900390816113cc5790505b50925060005b818110156114415782818151811061140857611407612c92565b5b602002602001015184828151811061142357611422612c92565b5b6020026020010181905250808061143990612d46565b9150506113ed565b505050919050565b6000600954905090565b60008061145f33612260565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114a99190612d8e565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611508929190612e54565b6020604051808303816000875af1158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b9190612ea9565b6115595760009150506115b5565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115a89190612d8e565b9250508190555060019150505b90565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161161993929190612ed6565b6020604051808303816000875af1158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190612ea9565b61166957600090506116fc565b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116b49190612cf0565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179b90612f7f565b60405180910390fd5b81600080858152602001908152602001600020600301819055508060008085815260200190815260200160002060020181905550505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600060015467ffffffffffffffff81111561184657611845612c63565b5b60405190808252806020026020018201604052801561187f57816020015b61186c6122b7565b8152602001906001900390816118645790505b509050600080600090505b60015481101561198e57600080600083815260200190815260200160002060030154111561197b576000808281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250508383815181106119605761195f612c92565b5b60200260200101819052506001826119789190612cf0565b91505b808061198690612d46565b91505061188a565b508067ffffffffffffffff8111156119a9576119a8612c63565b5b6040519080825280602002602001820160405280156119e257816020015b6119cf6122b7565b8152602001906001900390816119c75790505b50925060005b81811015611a3c57828181518110611a0357611a02612c92565b5b6020026020010151848281518110611a1e57611a1d612c92565b5b60200260200101819052508080611a3490612d46565b9150506119e8565b50505090565b6000806000808481526020019081526020016000206003015411611a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9290612feb565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462093a8060008085815260200190815260200160002060020154600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b3f9190612cf0565b611b49919061300b565b1015611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b81906130fd565b60405180910390fd5b60006040518060e00160405280600354815260200160008086815260200190815260200160002060040154815260200160008086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160008086815260200190815260200160002060020154815260200142815260200142815250905080600260006003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c0820151816006015590505060036000815480929190611d3a90612d46565b919050555060008084815260200190815260200160002060020154600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611da39190612cf0565b925050819055506001600354611db99190612d8e565b915050919050565b611dc96122fc565b600260008367ffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820154815250509050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5d9061318f565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600060015467ffffffffffffffff811115611fca57611fc9612c63565b5b60405190808252806020026020018201604052801561200357816020015b611ff06122b7565b815260200190600190039081611fe85790505b509050600080600090505b60015481101561215c578473ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612149576000808281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505083838151811061212e5761212d612c92565b5b60200260200101819052506001826121469190612cf0565b91505b808061215490612d46565b91505061200e565b508067ffffffffffffffff81111561217757612176612c63565b5b6040519080825280602002602001820160405280156121b057816020015b61219d6122b7565b8152602001906001900390816121955790505b50925060005b8181101561220a578281815181106121d1576121d0612c92565b5b60200260200101518482815181106121ec576121eb612c92565b5b6020026020010181905250808061220290612d46565b9150506121b6565b505050919050565b62093a8081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600062093a80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b0919061300b565b9050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b61237d8161236a565b811461238857600080fd5b50565b60008135905061239a81612374565b92915050565b6000602082840312156123b6576123b5612365565b5b60006123c48482850161238b565b91505092915050565b60008115159050919050565b6123e2816123cd565b82525050565b60006020820190506123fd60008301846123d9565b92915050565b61240c8161236a565b82525050565b60006020820190506124276000830184612403565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6124628161236a565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061249382612468565b9050919050565b6124a381612488565b82525050565b60a0820160008201516124bf6000850182612459565b5060208201516124d2602085018261249a565b5060408201516124e56040850182612459565b5060608201516124f86060850182612459565b50608082015161250b6080850182612459565b50505050565b600061251d83836124a9565b60a08301905092915050565b6000602082019050919050565b60006125418261242d565b61254b8185612438565b935061255683612449565b8060005b8381101561258757815161256e8882612511565b975061257983612529565b92505060018101905061255a565b5085935050505092915050565b600060208201905081810360008301526125ae8184612536565b905092915050565b6125bf81612488565b81146125ca57600080fd5b50565b6000813590506125dc816125b6565b92915050565b6000602082840312156125f8576125f7612365565b5b6000612606848285016125cd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516126516000850182612459565b5060208201516126646020850182612459565b506040820151612677604085018261249a565b50606082015161268a606085018261249a565b50608082015161269d6080850182612459565b5060a08201516126b060a0850182612459565b5060c08201516126c360c0850182612459565b50505050565b60006126d5838361263b565b60e08301905092915050565b6000602082019050919050565b60006126f98261260f565b612703818561261a565b935061270e8361262b565b8060005b8381101561273f57815161272688826126c9565b9750612731836126e1565b925050600181019050612712565b5085935050505092915050565b6000602082019050818103600083015261276681846126ee565b905092915050565b60008060006060848603121561278757612786612365565b5b60006127958682870161238b565b93505060206127a68682870161238b565b92505060406127b78682870161238b565b9150509250925092565b6127ca81612488565b82525050565b60006020820190506127e560008301846127c1565b92915050565b60006040820190506128006000830185612403565b61280d6020830184612403565b9392505050565b6000819050919050565b600061283961283461282f84612468565b612814565b612468565b9050919050565b600061284b8261281e565b9050919050565b600061285d82612840565b9050919050565b61286d81612852565b82525050565b60006020820190506128886000830184612864565b92915050565b6000819050919050565b6128a18161288e565b82525050565b60006020820190506128bc6000830184612898565b92915050565b600067ffffffffffffffff82169050919050565b6128df816128c2565b81146128ea57600080fd5b50565b6000813590506128fc816128d6565b92915050565b60006020828403121561291857612917612365565b5b6000612926848285016128ed565b91505092915050565b60e0820160008201516129456000850182612459565b5060208201516129586020850182612459565b50604082015161296b604085018261249a565b50606082015161297e606085018261249a565b5060808201516129916080850182612459565b5060a08201516129a460a0850182612459565b5060c08201516129b760c0850182612459565b50505050565b600060e0820190506129d2600083018461292f565b92915050565b60006129e382612488565b9050919050565b6129f3816129d8565b81146129fe57600080fd5b50565b600081359050612a10816129ea565b92915050565b600060208284031215612a2c57612a2b612365565b5b6000612a3a84828501612a01565b91505092915050565b612a4c8161288e565b8114612a5757600080fd5b50565b600081359050612a6981612a43565b92915050565b600060208284031215612a8557612a84612365565b5b6000612a9384828501612a5a565b91505092915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2072656d6f766520616e206f666660008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b09602283612a9c565b9150612b1482612aad565b604082019050919050565b60006020820190508181036000830152612b3881612afc565b9050919050565b7f636f6d6d756e697479206665652073686f756c6420626520696e2072616e676560008201527f206f662030202830252920746f20313030303020283130302529000000000000602082015250565b6000612b9b603a83612a9c565b9150612ba682612b3f565b604082019050919050565b60006020820190508181036000830152612bca81612b8e565b9050919050565b7f6f6e6c7920636f6d6d756e69747920636f6e74726163742063616e207365742060008201527f636f6d6d756e6974792066656500000000000000000000000000000000000000602082015250565b6000612c2d602d83612a9c565b9150612c3882612bd1565b604082019050919050565b60006020820190508181036000830152612c5c81612c20565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cfb8261236a565b9150612d068361236a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d3b57612d3a612cc1565b5b828201905092915050565b6000612d518261236a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d8357612d82612cc1565b5b600182019050919050565b6000612d998261236a565b9150612da48361236a565b925082821015612db757612db6612cc1565b5b828203905092915050565b7f6f6e6c7920636f6d6d756e69747920636f6e74726163742063616e207365742060008201527f6e657720636f6d6d756e69747920636f6e747261637400000000000000000000602082015250565b6000612e1e603683612a9c565b9150612e2982612dc2565b604082019050919050565b60006020820190508181036000830152612e4d81612e11565b9050919050565b6000604082019050612e6960008301856127c1565b612e766020830184612403565b9392505050565b612e86816123cd565b8114612e9157600080fd5b50565b600081519050612ea381612e7d565b92915050565b600060208284031215612ebf57612ebe612365565b5b6000612ecd84828501612e94565b91505092915050565b6000606082019050612eeb60008301866127c1565b612ef860208301856127c1565b612f056040830184612403565b949350505050565b7f4f6e6c7920746865206f776e65722063616e2075706461746520616e206f666660008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f69602283612a9c565b9150612f7482612f0d565b604082019050919050565b60006020820190508181036000830152612f9881612f5c565b9050919050565b7f4e6f206d616368696e657320617661696c61626c650000000000000000000000600082015250565b6000612fd5601583612a9c565b9150612fe082612f9f565b602082019050919050565b6000602082019050818103600083015261300481612fc8565b9050919050565b60006130168261236a565b91506130218361236a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561305a57613059612cc1565b5b828202905092915050565b7f596f7520646f6e2774206861766520656e6f7567682062616c616e636520746f60008201527f2070617920666f72207468697320616e6420616c6c206f7468657220564d732060208201527f666f722037206461797300000000000000000000000000000000000000000000604082015250565b60006130e7604a83612a9c565b91506130f282613065565b606082019050919050565b60006020820190508181036000830152613116816130da565b9050919050565b7f6f6e6c7920636f6d6d756e69747920636f6e74726163742063616e207365742060008201527f737461626c65636f696e00000000000000000000000000000000000000000000602082015250565b6000613179602a83612a9c565b91506131848261311d565b604082019050919050565b600060208201905081810360008301526131a88161316c565b905091905056fea2646970667358221220c3890a61a275a0cc24e85fca8257e817ac3981393dff49f208e75a660ac828d564736f6c634300080f0033",
}

// BrokerABI is the input ABI used to generate the binding from.
// Deprecated: Use BrokerMetaData.ABI instead.
var BrokerABI = BrokerMetaData.ABI

// BrokerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BrokerMetaData.Bin instead.
var BrokerBin = BrokerMetaData.Bin

// DeployBroker deploys a new Ethereum contract, binding an instance of Broker to it.
func DeployBroker(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Broker, error) {
	parsed, err := BrokerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BrokerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// Broker is an auto generated Go binding around an Ethereum contract.
type Broker struct {
	BrokerCaller     // Read-only binding to the contract
	BrokerTransactor // Write-only binding to the contract
	BrokerFilterer   // Log filterer for contract events
}

// BrokerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrokerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrokerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrokerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrokerSession struct {
	Contract     *Broker           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrokerCallerSession struct {
	Contract *BrokerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BrokerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrokerTransactorSession struct {
	Contract     *BrokerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrokerRaw struct {
	Contract *Broker // Generic contract binding to access the raw methods on
}

// BrokerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrokerCallerRaw struct {
	Contract *BrokerCaller // Generic read-only contract binding to access the raw methods on
}

// BrokerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrokerTransactorRaw struct {
	Contract *BrokerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBroker creates a new instance of Broker, bound to a specific deployed contract.
func NewBroker(address common.Address, backend bind.ContractBackend) (*Broker, error) {
	contract, err := bindBroker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// NewBrokerCaller creates a new read-only instance of Broker, bound to a specific deployed contract.
func NewBrokerCaller(address common.Address, caller bind.ContractCaller) (*BrokerCaller, error) {
	contract, err := bindBroker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerCaller{contract: contract}, nil
}

// NewBrokerTransactor creates a new write-only instance of Broker, bound to a specific deployed contract.
func NewBrokerTransactor(address common.Address, transactor bind.ContractTransactor) (*BrokerTransactor, error) {
	contract, err := bindBroker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerTransactor{contract: contract}, nil
}

// NewBrokerFilterer creates a new log filterer instance of Broker, bound to a specific deployed contract.
func NewBrokerFilterer(address common.Address, filterer bind.ContractFilterer) (*BrokerFilterer, error) {
	contract, err := bindBroker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrokerFilterer{contract: contract}, nil
}

// bindBroker binds a generic wrapper to an already deployed contract.
func bindBroker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BrokerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.BrokerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transact(opts, method, params...)
}

// FindBookingsByMiner is a free data retrieval call binding the contract method 0x366445bf.
//
// Solidity: function FindBookingsByMiner(address _miner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCaller) FindBookingsByMiner(opts *bind.CallOpts, _miner common.Address) ([]BrokerBooking, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "FindBookingsByMiner", _miner)

	if err != nil {
		return *new([]BrokerBooking), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerBooking)).(*[]BrokerBooking)

	return out0, err

}

// FindBookingsByMiner is a free data retrieval call binding the contract method 0x366445bf.
//
// Solidity: function FindBookingsByMiner(address _miner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerSession) FindBookingsByMiner(_miner common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.FindBookingsByMiner(&_Broker.CallOpts, _miner)
}

// FindBookingsByMiner is a free data retrieval call binding the contract method 0x366445bf.
//
// Solidity: function FindBookingsByMiner(address _miner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCallerSession) FindBookingsByMiner(_miner common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.FindBookingsByMiner(&_Broker.CallOpts, _miner)
}

// FindBookingsByUser is a free data retrieval call binding the contract method 0x534b3ccb.
//
// Solidity: function FindBookingsByUser(address _owner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCaller) FindBookingsByUser(opts *bind.CallOpts, _owner common.Address) ([]BrokerBooking, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "FindBookingsByUser", _owner)

	if err != nil {
		return *new([]BrokerBooking), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerBooking)).(*[]BrokerBooking)

	return out0, err

}

// FindBookingsByUser is a free data retrieval call binding the contract method 0x534b3ccb.
//
// Solidity: function FindBookingsByUser(address _owner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerSession) FindBookingsByUser(_owner common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.FindBookingsByUser(&_Broker.CallOpts, _owner)
}

// FindBookingsByUser is a free data retrieval call binding the contract method 0x534b3ccb.
//
// Solidity: function FindBookingsByUser(address _owner) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCallerSession) FindBookingsByUser(_owner common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.FindBookingsByUser(&_Broker.CallOpts, _owner)
}

// GetAvailableOffers is a free data retrieval call binding the contract method 0xb65c4b9c.
//
// Solidity: function GetAvailableOffers() view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCaller) GetAvailableOffers(opts *bind.CallOpts) ([]BrokerVMOffer, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetAvailableOffers")

	if err != nil {
		return *new([]BrokerVMOffer), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerVMOffer)).(*[]BrokerVMOffer)

	return out0, err

}

// GetAvailableOffers is a free data retrieval call binding the contract method 0xb65c4b9c.
//
// Solidity: function GetAvailableOffers() view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerSession) GetAvailableOffers() ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetAvailableOffers(&_Broker.CallOpts)
}

// GetAvailableOffers is a free data retrieval call binding the contract method 0xb65c4b9c.
//
// Solidity: function GetAvailableOffers() view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCallerSession) GetAvailableOffers() ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetAvailableOffers(&_Broker.CallOpts)
}

// GetAvailableOffersByType is a free data retrieval call binding the contract method 0x21e20d00.
//
// Solidity: function GetAvailableOffersByType(uint256 _vmTypeId) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCaller) GetAvailableOffersByType(opts *bind.CallOpts, _vmTypeId *big.Int) ([]BrokerVMOffer, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetAvailableOffersByType", _vmTypeId)

	if err != nil {
		return *new([]BrokerVMOffer), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerVMOffer)).(*[]BrokerVMOffer)

	return out0, err

}

// GetAvailableOffersByType is a free data retrieval call binding the contract method 0x21e20d00.
//
// Solidity: function GetAvailableOffersByType(uint256 _vmTypeId) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerSession) GetAvailableOffersByType(_vmTypeId *big.Int) ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetAvailableOffersByType(&_Broker.CallOpts, _vmTypeId)
}

// GetAvailableOffersByType is a free data retrieval call binding the contract method 0x21e20d00.
//
// Solidity: function GetAvailableOffersByType(uint256 _vmTypeId) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCallerSession) GetAvailableOffersByType(_vmTypeId *big.Int) ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetAvailableOffersByType(&_Broker.CallOpts, _vmTypeId)
}

// GetBooking is a free data retrieval call binding the contract method 0xc2161a05.
//
// Solidity: function GetBooking(uint64 index) view returns((uint256,uint256,address,address,uint256,uint256,uint256) booking)
func (_Broker *BrokerCaller) GetBooking(opts *bind.CallOpts, index uint64) (BrokerBooking, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetBooking", index)

	if err != nil {
		return *new(BrokerBooking), err
	}

	out0 := *abi.ConvertType(out[0], new(BrokerBooking)).(*BrokerBooking)

	return out0, err

}

// GetBooking is a free data retrieval call binding the contract method 0xc2161a05.
//
// Solidity: function GetBooking(uint64 index) view returns((uint256,uint256,address,address,uint256,uint256,uint256) booking)
func (_Broker *BrokerSession) GetBooking(index uint64) (BrokerBooking, error) {
	return _Broker.Contract.GetBooking(&_Broker.CallOpts, index)
}

// GetBooking is a free data retrieval call binding the contract method 0xc2161a05.
//
// Solidity: function GetBooking(uint64 index) view returns((uint256,uint256,address,address,uint256,uint256,uint256) booking)
func (_Broker *BrokerCallerSession) GetBooking(index uint64) (BrokerBooking, error) {
	return _Broker.Contract.GetBooking(&_Broker.CallOpts, index)
}

// GetMinersOffers is a free data retrieval call binding the contract method 0xd3554ab5.
//
// Solidity: function GetMinersOffers(address miner) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCaller) GetMinersOffers(opts *bind.CallOpts, miner common.Address) ([]BrokerVMOffer, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetMinersOffers", miner)

	if err != nil {
		return *new([]BrokerVMOffer), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerVMOffer)).(*[]BrokerVMOffer)

	return out0, err

}

// GetMinersOffers is a free data retrieval call binding the contract method 0xd3554ab5.
//
// Solidity: function GetMinersOffers(address miner) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerSession) GetMinersOffers(miner common.Address) ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetMinersOffers(&_Broker.CallOpts, miner)
}

// GetMinersOffers is a free data retrieval call binding the contract method 0xd3554ab5.
//
// Solidity: function GetMinersOffers(address miner) view returns((uint256,address,uint256,uint256,uint256)[] filteredOffers)
func (_Broker *BrokerCallerSession) GetMinersOffers(miner common.Address) ([]BrokerVMOffer, error) {
	return _Broker.Contract.GetMinersOffers(&_Broker.CallOpts, miner)
}

// GetStablecoinBalance is a free data retrieval call binding the contract method 0x7559fe62.
//
// Solidity: function GetStablecoinBalance(address user) view returns(uint256, uint256)
func (_Broker *BrokerCaller) GetStablecoinBalance(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetStablecoinBalance", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStablecoinBalance is a free data retrieval call binding the contract method 0x7559fe62.
//
// Solidity: function GetStablecoinBalance(address user) view returns(uint256, uint256)
func (_Broker *BrokerSession) GetStablecoinBalance(user common.Address) (*big.Int, *big.Int, error) {
	return _Broker.Contract.GetStablecoinBalance(&_Broker.CallOpts, user)
}

// GetStablecoinBalance is a free data retrieval call binding the contract method 0x7559fe62.
//
// Solidity: function GetStablecoinBalance(address user) view returns(uint256, uint256)
func (_Broker *BrokerCallerSession) GetStablecoinBalance(user common.Address) (*big.Int, *big.Int, error) {
	return _Broker.Contract.GetStablecoinBalance(&_Broker.CallOpts, user)
}

// GetTime is a free data retrieval call binding the contract method 0x18c5e502.
//
// Solidity: function GetTime() view returns(uint256)
func (_Broker *BrokerCaller) GetTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTime is a free data retrieval call binding the contract method 0x18c5e502.
//
// Solidity: function GetTime() view returns(uint256)
func (_Broker *BrokerSession) GetTime() (*big.Int, error) {
	return _Broker.Contract.GetTime(&_Broker.CallOpts)
}

// GetTime is a free data retrieval call binding the contract method 0x18c5e502.
//
// Solidity: function GetTime() view returns(uint256)
func (_Broker *BrokerCallerSession) GetTime() (*big.Int, error) {
	return _Broker.Contract.GetTime(&_Broker.CallOpts)
}

// GetUsersBookings is a free data retrieval call binding the contract method 0x7f7a1915.
//
// Solidity: function GetUsersBookings(address user) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCaller) GetUsersBookings(opts *bind.CallOpts, user common.Address) ([]BrokerBooking, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "GetUsersBookings", user)

	if err != nil {
		return *new([]BrokerBooking), err
	}

	out0 := *abi.ConvertType(out[0], new([]BrokerBooking)).(*[]BrokerBooking)

	return out0, err

}

// GetUsersBookings is a free data retrieval call binding the contract method 0x7f7a1915.
//
// Solidity: function GetUsersBookings(address user) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerSession) GetUsersBookings(user common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.GetUsersBookings(&_Broker.CallOpts, user)
}

// GetUsersBookings is a free data retrieval call binding the contract method 0x7f7a1915.
//
// Solidity: function GetUsersBookings(address user) view returns((uint256,uint256,address,address,uint256,uint256,uint256)[] filteredBookings)
func (_Broker *BrokerCallerSession) GetUsersBookings(user common.Address) ([]BrokerBooking, error) {
	return _Broker.Contract.GetUsersBookings(&_Broker.CallOpts, user)
}

// SECONDSINWEEK is a free data retrieval call binding the contract method 0xe088b29e.
//
// Solidity: function SECONDS_IN_WEEK() view returns(uint256)
func (_Broker *BrokerCaller) SECONDSINWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "SECONDS_IN_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSINWEEK is a free data retrieval call binding the contract method 0xe088b29e.
//
// Solidity: function SECONDS_IN_WEEK() view returns(uint256)
func (_Broker *BrokerSession) SECONDSINWEEK() (*big.Int, error) {
	return _Broker.Contract.SECONDSINWEEK(&_Broker.CallOpts)
}

// SECONDSINWEEK is a free data retrieval call binding the contract method 0xe088b29e.
//
// Solidity: function SECONDS_IN_WEEK() view returns(uint256)
func (_Broker *BrokerCallerSession) SECONDSINWEEK() (*big.Int, error) {
	return _Broker.Contract.SECONDSINWEEK(&_Broker.CallOpts)
}

// GetCommunityContract is a free data retrieval call binding the contract method 0x569e2e0f.
//
// Solidity: function getCommunityContract() view returns(address)
func (_Broker *BrokerCaller) GetCommunityContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getCommunityContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCommunityContract is a free data retrieval call binding the contract method 0x569e2e0f.
//
// Solidity: function getCommunityContract() view returns(address)
func (_Broker *BrokerSession) GetCommunityContract() (common.Address, error) {
	return _Broker.Contract.GetCommunityContract(&_Broker.CallOpts)
}

// GetCommunityContract is a free data retrieval call binding the contract method 0x569e2e0f.
//
// Solidity: function getCommunityContract() view returns(address)
func (_Broker *BrokerCallerSession) GetCommunityContract() (common.Address, error) {
	return _Broker.Contract.GetCommunityContract(&_Broker.CallOpts)
}

// GetCommunityFee is a free data retrieval call binding the contract method 0x90ad688b.
//
// Solidity: function getCommunityFee() view returns(uint256)
func (_Broker *BrokerCaller) GetCommunityFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getCommunityFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommunityFee is a free data retrieval call binding the contract method 0x90ad688b.
//
// Solidity: function getCommunityFee() view returns(uint256)
func (_Broker *BrokerSession) GetCommunityFee() (*big.Int, error) {
	return _Broker.Contract.GetCommunityFee(&_Broker.CallOpts)
}

// GetCommunityFee is a free data retrieval call binding the contract method 0x90ad688b.
//
// Solidity: function getCommunityFee() view returns(uint256)
func (_Broker *BrokerCallerSession) GetCommunityFee() (*big.Int, error) {
	return _Broker.Contract.GetCommunityFee(&_Broker.CallOpts)
}

// GetMinerUrl is a free data retrieval call binding the contract method 0xab49ec45.
//
// Solidity: function getMinerUrl(address _user) view returns(bytes32)
func (_Broker *BrokerCaller) GetMinerUrl(opts *bind.CallOpts, _user common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getMinerUrl", _user)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMinerUrl is a free data retrieval call binding the contract method 0xab49ec45.
//
// Solidity: function getMinerUrl(address _user) view returns(bytes32)
func (_Broker *BrokerSession) GetMinerUrl(_user common.Address) ([32]byte, error) {
	return _Broker.Contract.GetMinerUrl(&_Broker.CallOpts, _user)
}

// GetMinerUrl is a free data retrieval call binding the contract method 0xab49ec45.
//
// Solidity: function getMinerUrl(address _user) view returns(bytes32)
func (_Broker *BrokerCallerSession) GetMinerUrl(_user common.Address) ([32]byte, error) {
	return _Broker.Contract.GetMinerUrl(&_Broker.CallOpts, _user)
}

// GetStablecoinAddress is a free data retrieval call binding the contract method 0x7bef4f54.
//
// Solidity: function getStablecoinAddress() view returns(address)
func (_Broker *BrokerCaller) GetStablecoinAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getStablecoinAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStablecoinAddress is a free data retrieval call binding the contract method 0x7bef4f54.
//
// Solidity: function getStablecoinAddress() view returns(address)
func (_Broker *BrokerSession) GetStablecoinAddress() (common.Address, error) {
	return _Broker.Contract.GetStablecoinAddress(&_Broker.CallOpts)
}

// GetStablecoinAddress is a free data retrieval call binding the contract method 0x7bef4f54.
//
// Solidity: function getStablecoinAddress() view returns(address)
func (_Broker *BrokerCallerSession) GetStablecoinAddress() (common.Address, error) {
	return _Broker.Contract.GetStablecoinAddress(&_Broker.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(uint256)
func (_Broker *BrokerCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(uint256)
func (_Broker *BrokerSession) Version() (*big.Int, error) {
	return _Broker.Contract.Version(&_Broker.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(uint256)
func (_Broker *BrokerCallerSession) Version() (*big.Int, error) {
	return _Broker.Contract.Version(&_Broker.CallOpts)
}

// BookVM is a paid mutator transaction binding the contract method 0xc1f6b1fa.
//
// Solidity: function BookVM(uint256 offerIndex) returns(uint256)
func (_Broker *BrokerTransactor) BookVM(opts *bind.TransactOpts, offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "BookVM", offerIndex)
}

// BookVM is a paid mutator transaction binding the contract method 0xc1f6b1fa.
//
// Solidity: function BookVM(uint256 offerIndex) returns(uint256)
func (_Broker *BrokerSession) BookVM(offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.BookVM(&_Broker.TransactOpts, offerIndex)
}

// BookVM is a paid mutator transaction binding the contract method 0xc1f6b1fa.
//
// Solidity: function BookVM(uint256 offerIndex) returns(uint256)
func (_Broker *BrokerTransactorSession) BookVM(offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.BookVM(&_Broker.TransactOpts, offerIndex)
}

// DepositCoins is a paid mutator transaction binding the contract method 0xa3c28021.
//
// Solidity: function DepositCoins(uint256 numTokens) returns(bool)
func (_Broker *BrokerTransactor) DepositCoins(opts *bind.TransactOpts, numTokens *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "DepositCoins", numTokens)
}

// DepositCoins is a paid mutator transaction binding the contract method 0xa3c28021.
//
// Solidity: function DepositCoins(uint256 numTokens) returns(bool)
func (_Broker *BrokerSession) DepositCoins(numTokens *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.DepositCoins(&_Broker.TransactOpts, numTokens)
}

// DepositCoins is a paid mutator transaction binding the contract method 0xa3c28021.
//
// Solidity: function DepositCoins(uint256 numTokens) returns(bool)
func (_Broker *BrokerTransactorSession) DepositCoins(numTokens *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.DepositCoins(&_Broker.TransactOpts, numTokens)
}

// RemoveOffer is a paid mutator transaction binding the contract method 0x00cf9021.
//
// Solidity: function RemoveOffer(uint256 offerIndex) returns()
func (_Broker *BrokerTransactor) RemoveOffer(opts *bind.TransactOpts, offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "RemoveOffer", offerIndex)
}

// RemoveOffer is a paid mutator transaction binding the contract method 0x00cf9021.
//
// Solidity: function RemoveOffer(uint256 offerIndex) returns()
func (_Broker *BrokerSession) RemoveOffer(offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.RemoveOffer(&_Broker.TransactOpts, offerIndex)
}

// RemoveOffer is a paid mutator transaction binding the contract method 0x00cf9021.
//
// Solidity: function RemoveOffer(uint256 offerIndex) returns()
func (_Broker *BrokerTransactorSession) RemoveOffer(offerIndex *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.RemoveOffer(&_Broker.TransactOpts, offerIndex)
}

// SetCommunityContract is a paid mutator transaction binding the contract method 0x6b620ed5.
//
// Solidity: function SetCommunityContract(address newCommunityAddress) returns()
func (_Broker *BrokerTransactor) SetCommunityContract(opts *bind.TransactOpts, newCommunityAddress common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "SetCommunityContract", newCommunityAddress)
}

// SetCommunityContract is a paid mutator transaction binding the contract method 0x6b620ed5.
//
// Solidity: function SetCommunityContract(address newCommunityAddress) returns()
func (_Broker *BrokerSession) SetCommunityContract(newCommunityAddress common.Address) (*types.Transaction, error) {
	return _Broker.Contract.SetCommunityContract(&_Broker.TransactOpts, newCommunityAddress)
}

// SetCommunityContract is a paid mutator transaction binding the contract method 0x6b620ed5.
//
// Solidity: function SetCommunityContract(address newCommunityAddress) returns()
func (_Broker *BrokerTransactorSession) SetCommunityContract(newCommunityAddress common.Address) (*types.Transaction, error) {
	return _Broker.Contract.SetCommunityContract(&_Broker.TransactOpts, newCommunityAddress)
}

// SetStablecoinAddress is a paid mutator transaction binding the contract method 0xc9b16fee.
//
// Solidity: function SetStablecoinAddress(address newStablecoinAddress) returns()
func (_Broker *BrokerTransactor) SetStablecoinAddress(opts *bind.TransactOpts, newStablecoinAddress common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "SetStablecoinAddress", newStablecoinAddress)
}

// SetStablecoinAddress is a paid mutator transaction binding the contract method 0xc9b16fee.
//
// Solidity: function SetStablecoinAddress(address newStablecoinAddress) returns()
func (_Broker *BrokerSession) SetStablecoinAddress(newStablecoinAddress common.Address) (*types.Transaction, error) {
	return _Broker.Contract.SetStablecoinAddress(&_Broker.TransactOpts, newStablecoinAddress)
}

// SetStablecoinAddress is a paid mutator transaction binding the contract method 0xc9b16fee.
//
// Solidity: function SetStablecoinAddress(address newStablecoinAddress) returns()
func (_Broker *BrokerTransactorSession) SetStablecoinAddress(newStablecoinAddress common.Address) (*types.Transaction, error) {
	return _Broker.Contract.SetStablecoinAddress(&_Broker.TransactOpts, newStablecoinAddress)
}

// UpdateOffer is a paid mutator transaction binding the contract method 0xa5701e63.
//
// Solidity: function UpdateOffer(uint256 offerIndex, uint256 machinesAvailable, uint256 pps) returns()
func (_Broker *BrokerTransactor) UpdateOffer(opts *bind.TransactOpts, offerIndex *big.Int, machinesAvailable *big.Int, pps *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "UpdateOffer", offerIndex, machinesAvailable, pps)
}

// UpdateOffer is a paid mutator transaction binding the contract method 0xa5701e63.
//
// Solidity: function UpdateOffer(uint256 offerIndex, uint256 machinesAvailable, uint256 pps) returns()
func (_Broker *BrokerSession) UpdateOffer(offerIndex *big.Int, machinesAvailable *big.Int, pps *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.UpdateOffer(&_Broker.TransactOpts, offerIndex, machinesAvailable, pps)
}

// UpdateOffer is a paid mutator transaction binding the contract method 0xa5701e63.
//
// Solidity: function UpdateOffer(uint256 offerIndex, uint256 machinesAvailable, uint256 pps) returns()
func (_Broker *BrokerTransactorSession) UpdateOffer(offerIndex *big.Int, machinesAvailable *big.Int, pps *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.UpdateOffer(&_Broker.TransactOpts, offerIndex, machinesAvailable, pps)
}

// WithdrawStablecoin is a paid mutator transaction binding the contract method 0x9f4b80ab.
//
// Solidity: function WithdrawStablecoin() returns(bool)
func (_Broker *BrokerTransactor) WithdrawStablecoin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "WithdrawStablecoin")
}

// WithdrawStablecoin is a paid mutator transaction binding the contract method 0x9f4b80ab.
//
// Solidity: function WithdrawStablecoin() returns(bool)
func (_Broker *BrokerSession) WithdrawStablecoin() (*types.Transaction, error) {
	return _Broker.Contract.WithdrawStablecoin(&_Broker.TransactOpts)
}

// WithdrawStablecoin is a paid mutator transaction binding the contract method 0x9f4b80ab.
//
// Solidity: function WithdrawStablecoin() returns(bool)
func (_Broker *BrokerTransactorSession) WithdrawStablecoin() (*types.Transaction, error) {
	return _Broker.Contract.WithdrawStablecoin(&_Broker.TransactOpts)
}

// AddOffer is a paid mutator transaction binding the contract method 0x3b3e328b.
//
// Solidity: function addOffer(uint256 pricePerSecond, uint256 vmTypeId, uint256 machinesAvailable) returns(uint256)
func (_Broker *BrokerTransactor) AddOffer(opts *bind.TransactOpts, pricePerSecond *big.Int, vmTypeId *big.Int, machinesAvailable *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "addOffer", pricePerSecond, vmTypeId, machinesAvailable)
}

// AddOffer is a paid mutator transaction binding the contract method 0x3b3e328b.
//
// Solidity: function addOffer(uint256 pricePerSecond, uint256 vmTypeId, uint256 machinesAvailable) returns(uint256)
func (_Broker *BrokerSession) AddOffer(pricePerSecond *big.Int, vmTypeId *big.Int, machinesAvailable *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.AddOffer(&_Broker.TransactOpts, pricePerSecond, vmTypeId, machinesAvailable)
}

// AddOffer is a paid mutator transaction binding the contract method 0x3b3e328b.
//
// Solidity: function addOffer(uint256 pricePerSecond, uint256 vmTypeId, uint256 machinesAvailable) returns(uint256)
func (_Broker *BrokerTransactorSession) AddOffer(pricePerSecond *big.Int, vmTypeId *big.Int, machinesAvailable *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.AddOffer(&_Broker.TransactOpts, pricePerSecond, vmTypeId, machinesAvailable)
}

// SetCommunityFee is a paid mutator transaction binding the contract method 0x0d12bbdb.
//
// Solidity: function setCommunityFee(uint256 fee) returns(bool)
func (_Broker *BrokerTransactor) SetCommunityFee(opts *bind.TransactOpts, fee *big.Int) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "setCommunityFee", fee)
}

// SetCommunityFee is a paid mutator transaction binding the contract method 0x0d12bbdb.
//
// Solidity: function setCommunityFee(uint256 fee) returns(bool)
func (_Broker *BrokerSession) SetCommunityFee(fee *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.SetCommunityFee(&_Broker.TransactOpts, fee)
}

// SetCommunityFee is a paid mutator transaction binding the contract method 0x0d12bbdb.
//
// Solidity: function setCommunityFee(uint256 fee) returns(bool)
func (_Broker *BrokerTransactorSession) SetCommunityFee(fee *big.Int) (*types.Transaction, error) {
	return _Broker.Contract.SetCommunityFee(&_Broker.TransactOpts, fee)
}

// SetMunerUrl is a paid mutator transaction binding the contract method 0xf44f11cd.
//
// Solidity: function setMunerUrl(bytes32 url) returns()
func (_Broker *BrokerTransactor) SetMunerUrl(opts *bind.TransactOpts, url [32]byte) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "setMunerUrl", url)
}

// SetMunerUrl is a paid mutator transaction binding the contract method 0xf44f11cd.
//
// Solidity: function setMunerUrl(bytes32 url) returns()
func (_Broker *BrokerSession) SetMunerUrl(url [32]byte) (*types.Transaction, error) {
	return _Broker.Contract.SetMunerUrl(&_Broker.TransactOpts, url)
}

// SetMunerUrl is a paid mutator transaction binding the contract method 0xf44f11cd.
//
// Solidity: function setMunerUrl(bytes32 url) returns()
func (_Broker *BrokerTransactorSession) SetMunerUrl(url [32]byte) (*types.Transaction, error) {
	return _Broker.Contract.SetMunerUrl(&_Broker.TransactOpts, url)
}

// BrokerBookingClaimedIterator is returned from FilterBookingClaimed and is used to iterate over the raw logs and unpacked data for BookingClaimed events raised by the Broker contract.
type BrokerBookingClaimedIterator struct {
	Event *BrokerBookingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerBookingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerBookingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerBookingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerBookingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerBookingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerBookingClaimed represents a BookingClaimed event raised by the Broker contract.
type BrokerBookingClaimed struct {
	MinerPayout *big.Int
	Index       *big.Int
	Miner       common.Address
	User        common.Address
	TimeUsed    *big.Int
	VmTypeId    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBookingClaimed is a free log retrieval operation binding the contract event 0x75d2566632c43a31ab3bc2a82efa0c6d7797ad569fb798ae857716022614d90c.
//
// Solidity: event BookingClaimed(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) FilterBookingClaimed(opts *bind.FilterOpts, miner []common.Address, user []common.Address) (*BrokerBookingClaimedIterator, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.FilterLogs(opts, "BookingClaimed", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return &BrokerBookingClaimedIterator{contract: _Broker.contract, event: "BookingClaimed", logs: logs, sub: sub}, nil
}

// WatchBookingClaimed is a free log subscription operation binding the contract event 0x75d2566632c43a31ab3bc2a82efa0c6d7797ad569fb798ae857716022614d90c.
//
// Solidity: event BookingClaimed(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) WatchBookingClaimed(opts *bind.WatchOpts, sink chan<- *BrokerBookingClaimed, miner []common.Address, user []common.Address) (event.Subscription, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.WatchLogs(opts, "BookingClaimed", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerBookingClaimed)
				if err := _Broker.contract.UnpackLog(event, "BookingClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBookingClaimed is a log parse operation binding the contract event 0x75d2566632c43a31ab3bc2a82efa0c6d7797ad569fb798ae857716022614d90c.
//
// Solidity: event BookingClaimed(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) ParseBookingClaimed(log types.Log) (*BrokerBookingClaimed, error) {
	event := new(BrokerBookingClaimed)
	if err := _Broker.contract.UnpackLog(event, "BookingClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerBookingExtendedIterator is returned from FilterBookingExtended and is used to iterate over the raw logs and unpacked data for BookingExtended events raised by the Broker contract.
type BrokerBookingExtendedIterator struct {
	Event *BrokerBookingExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerBookingExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerBookingExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerBookingExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerBookingExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerBookingExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerBookingExtended represents a BookingExtended event raised by the Broker contract.
type BrokerBookingExtended struct {
	Index    *big.Int
	Miner    common.Address
	User     common.Address
	VmTypeId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBookingExtended is a free log retrieval operation binding the contract event 0x075b18a02d51e5a00f1bf8c8adbeba55d6fc957987d4285794bcd90298147468.
//
// Solidity: event BookingExtended(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) FilterBookingExtended(opts *bind.FilterOpts, miner []common.Address, user []common.Address) (*BrokerBookingExtendedIterator, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.FilterLogs(opts, "BookingExtended", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return &BrokerBookingExtendedIterator{contract: _Broker.contract, event: "BookingExtended", logs: logs, sub: sub}, nil
}

// WatchBookingExtended is a free log subscription operation binding the contract event 0x075b18a02d51e5a00f1bf8c8adbeba55d6fc957987d4285794bcd90298147468.
//
// Solidity: event BookingExtended(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) WatchBookingExtended(opts *bind.WatchOpts, sink chan<- *BrokerBookingExtended, miner []common.Address, user []common.Address) (event.Subscription, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.WatchLogs(opts, "BookingExtended", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerBookingExtended)
				if err := _Broker.contract.UnpackLog(event, "BookingExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBookingExtended is a log parse operation binding the contract event 0x075b18a02d51e5a00f1bf8c8adbeba55d6fc957987d4285794bcd90298147468.
//
// Solidity: event BookingExtended(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) ParseBookingExtended(log types.Log) (*BrokerBookingExtended, error) {
	event := new(BrokerBookingExtended)
	if err := _Broker.contract.UnpackLog(event, "BookingExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerBookingReportedIterator is returned from FilterBookingReported and is used to iterate over the raw logs and unpacked data for BookingReported events raised by the Broker contract.
type BrokerBookingReportedIterator struct {
	Event *BrokerBookingReported // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerBookingReportedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerBookingReported)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerBookingReported)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerBookingReportedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerBookingReportedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerBookingReported represents a BookingReported event raised by the Broker contract.
type BrokerBookingReported struct {
	MinerPayout *big.Int
	Index       *big.Int
	Miner       common.Address
	User        common.Address
	TimeUsed    *big.Int
	VmTypeId    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBookingReported is a free log retrieval operation binding the contract event 0x26c93dbbeb58948b01dbae3d96c9cbe902a2f92082c8d91ed5f12e8579b4cf41.
//
// Solidity: event BookingReported(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) FilterBookingReported(opts *bind.FilterOpts, miner []common.Address, user []common.Address) (*BrokerBookingReportedIterator, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.FilterLogs(opts, "BookingReported", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return &BrokerBookingReportedIterator{contract: _Broker.contract, event: "BookingReported", logs: logs, sub: sub}, nil
}

// WatchBookingReported is a free log subscription operation binding the contract event 0x26c93dbbeb58948b01dbae3d96c9cbe902a2f92082c8d91ed5f12e8579b4cf41.
//
// Solidity: event BookingReported(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) WatchBookingReported(opts *bind.WatchOpts, sink chan<- *BrokerBookingReported, miner []common.Address, user []common.Address) (event.Subscription, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.WatchLogs(opts, "BookingReported", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerBookingReported)
				if err := _Broker.contract.UnpackLog(event, "BookingReported", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBookingReported is a log parse operation binding the contract event 0x26c93dbbeb58948b01dbae3d96c9cbe902a2f92082c8d91ed5f12e8579b4cf41.
//
// Solidity: event BookingReported(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) ParseBookingReported(log types.Log) (*BrokerBookingReported, error) {
	event := new(BrokerBookingReported)
	if err := _Broker.contract.UnpackLog(event, "BookingReported", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerBookingStartedIterator is returned from FilterBookingStarted and is used to iterate over the raw logs and unpacked data for BookingStarted events raised by the Broker contract.
type BrokerBookingStartedIterator struct {
	Event *BrokerBookingStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerBookingStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerBookingStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerBookingStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerBookingStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerBookingStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerBookingStarted represents a BookingStarted event raised by the Broker contract.
type BrokerBookingStarted struct {
	Index    *big.Int
	Miner    common.Address
	User     common.Address
	VmTypeId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBookingStarted is a free log retrieval operation binding the contract event 0x246cbcaa18d1e49adb9a7db733d35a6e5a2690726bc6b2326bd3c53fa602f1b6.
//
// Solidity: event BookingStarted(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) FilterBookingStarted(opts *bind.FilterOpts, miner []common.Address, user []common.Address) (*BrokerBookingStartedIterator, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.FilterLogs(opts, "BookingStarted", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return &BrokerBookingStartedIterator{contract: _Broker.contract, event: "BookingStarted", logs: logs, sub: sub}, nil
}

// WatchBookingStarted is a free log subscription operation binding the contract event 0x246cbcaa18d1e49adb9a7db733d35a6e5a2690726bc6b2326bd3c53fa602f1b6.
//
// Solidity: event BookingStarted(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) WatchBookingStarted(opts *bind.WatchOpts, sink chan<- *BrokerBookingStarted, miner []common.Address, user []common.Address) (event.Subscription, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.WatchLogs(opts, "BookingStarted", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerBookingStarted)
				if err := _Broker.contract.UnpackLog(event, "BookingStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBookingStarted is a log parse operation binding the contract event 0x246cbcaa18d1e49adb9a7db733d35a6e5a2690726bc6b2326bd3c53fa602f1b6.
//
// Solidity: event BookingStarted(uint256 index, address indexed miner, address indexed user, uint256 vmTypeId)
func (_Broker *BrokerFilterer) ParseBookingStarted(log types.Log) (*BrokerBookingStarted, error) {
	event := new(BrokerBookingStarted)
	if err := _Broker.contract.UnpackLog(event, "BookingStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerBookingStoppedIterator is returned from FilterBookingStopped and is used to iterate over the raw logs and unpacked data for BookingStopped events raised by the Broker contract.
type BrokerBookingStoppedIterator struct {
	Event *BrokerBookingStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerBookingStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerBookingStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerBookingStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerBookingStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerBookingStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerBookingStopped represents a BookingStopped event raised by the Broker contract.
type BrokerBookingStopped struct {
	MinerPayout *big.Int
	Index       *big.Int
	Miner       common.Address
	User        common.Address
	TimeUsed    *big.Int
	VmTypeId    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBookingStopped is a free log retrieval operation binding the contract event 0x232ba2cbdb135f5ee58e4023da7094472434ff90d2d63f3c10232a45ee4c00d1.
//
// Solidity: event BookingStopped(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) FilterBookingStopped(opts *bind.FilterOpts, miner []common.Address, user []common.Address) (*BrokerBookingStoppedIterator, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.FilterLogs(opts, "BookingStopped", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return &BrokerBookingStoppedIterator{contract: _Broker.contract, event: "BookingStopped", logs: logs, sub: sub}, nil
}

// WatchBookingStopped is a free log subscription operation binding the contract event 0x232ba2cbdb135f5ee58e4023da7094472434ff90d2d63f3c10232a45ee4c00d1.
//
// Solidity: event BookingStopped(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) WatchBookingStopped(opts *bind.WatchOpts, sink chan<- *BrokerBookingStopped, miner []common.Address, user []common.Address) (event.Subscription, error) {

	var minerRule []interface{}
	for _, minerItem := range miner {
		minerRule = append(minerRule, minerItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Broker.contract.WatchLogs(opts, "BookingStopped", minerRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerBookingStopped)
				if err := _Broker.contract.UnpackLog(event, "BookingStopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBookingStopped is a log parse operation binding the contract event 0x232ba2cbdb135f5ee58e4023da7094472434ff90d2d63f3c10232a45ee4c00d1.
//
// Solidity: event BookingStopped(uint256 minerPayout, uint256 index, address indexed miner, address indexed user, uint256 timeUsed, uint256 vmTypeId)
func (_Broker *BrokerFilterer) ParseBookingStopped(log types.Log) (*BrokerBookingStopped, error) {
	event := new(BrokerBookingStopped)
	if err := _Broker.contract.UnpackLog(event, "BookingStopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
